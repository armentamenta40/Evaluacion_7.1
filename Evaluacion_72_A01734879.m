%% EXAMPLE: Differential drive vehicle following waypoints using the 
% Pure Pursuit algorithm
%
% Copyright 2018-2019 The MathWorks, Inc.

%% Define Vehicle
R = 0.1;                % Wheel radius [m]
L = 0.5;                % Wheelbase [m]
dd = DifferentialDrive(R,L);

%% Simulation parameters
sampleTime = 0.1;               % Sample time [s]
tVec = 0:sampleTime:280;         % Time array

initPose = [4;1;pi];             % Initial pose (x y theta)
pose = zeros(3,numel(tVec));    % Pose matrix
pose(:,1) = initPose;

% Define waypoints
waypoints = [5.1111720974116, 1.1920830768538;4.9804422038902, 1.8550703939982;5, 2.5;5.0831585487999, 3.1903828778244;5.316604787231, 3.4985319125535;5.4006454330662, 4.0961542829373;5.8395243613168, 4.4883439635016;6.418471032626, 4.6844388037838;7, 4.5;7.8004727641385, 4.5163575121133;8.4914736298947, 4.1801949287725;8.5941899748044, 3.7133024519102;8.6315413729533, 3.2744235236596;8.883663310459, 3.0316394356912;9, 2.5;9, 2;8.958366106757, 1.7150026509395;8.9023390095335, 1.3321508199125;8.7435955674003, 0.9399611393481;8.6782306206396, 0.6598256532307;8.5, 0.5;8.2113381437773, 0.3796901671134;7.8378241622874, 0.5664471578583;7.5203372780211, 0.743866299066;7.2588774909782, 0.8839340421246;7.5, 1;7.5203372780211, 1.2294344750027;7.3709316854251, 1.5095699611201;7.2028503937547, 1.8644082435355;7.2402017919037, 2.3126250213233;7.5109994284838, 2.2192465259508;7.7631213659895, 2.1538815791901;8.1553110465538, 2.1352058801156;8.4914736298947, 2.2752736231743;8.2660495268008, 2.4609837697039;8, 2.5;7.7213006348859, 2.5095257501716;7.5, 2.5;7.2790292572915, 2.5257064103275;6.9769902677149, 2.5958226043364;6.6048350841294, 2.6659387983452;6.1463830463792, 2.5796419441805;5.7418665424819, 2.5688548374099;5.5, 2.5;5.4290404461347, 2.4124417892363;5.5584857273818, 2.299177168145;5.8119827364908, 2.2236674207509;6.2380734539292, 2.2236674207509;6.4430284825705, 2.2883900613744;6.2488605606998, 2.5257064103275;6.6641641713677, 2.4933450900157;6.6533770645971, 2.2668158478333;6.6156221909, 2.0780414793479;6.5508995502764, 1.8299380236242;6.5455059968911, 1.6681314220653;6.5, 1.5;6.4052736088734, 1.2474342580122;6.5455059968911, 1.1018083166091;6.6891576437488, 0.896223938716;6.3131465626206, 0.8398222765467;6.0875399139437, 0.6330161819263;5.8243321571541, 0.1442017764597;5.5313753265877, 0.3610144680389;5.3726318844545, 0.7998933962894]

% Create visualizer
viz = Visualizer2D;
viz.hasWaypoints = true;

%% Pure Pursuit Controller
controller = controllerPurePursuit;
controller.Waypoints = waypoints;
controller.LookaheadDistance = 0.15;
controller.DesiredLinearVelocity = 0.25;
controller.MaxAngularVelocity = 18.5;

%% Simulation loop
close all
r = rateControl(1/sampleTime);
for idx = 2:numel(tVec) 
    % Run the Pure Pursuit controller and convert output to wheel speeds
    [vRef,wRef] = controller(pose(:,idx-1));
    [wL,wR] = inverseKinematics(dd,vRef,wRef);
    
    % Compute the velocities
    [v,w] = forwardKinematics(dd,wL,wR);
    velB = [v;0;w]; % Body velocities [vx;vy;w]
    vel = bodyToWorld(velB,pose(:,idx-1));  % Convert from body to world
    
    % Perform forward discrete integration step
    pose(:,idx) = pose(:,idx-1) + vel*sampleTime; 
    
    % Update visualization
    viz(pose(:,idx),waypoints)
    waitfor(r);
end